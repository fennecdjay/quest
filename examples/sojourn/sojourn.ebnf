program := <expr>+

expr
 := <ident> <assignment-op> <expr>
  | <literal>
  | <kw-expr>
  | '(' <expr> ')'
  | <block>
  | <unary-op> <expr>
  | <expr> <binary-op> <expr>
  | <expr> '(' (EMPTY | <expr> (',' <expr>)*) ')'

block := '{' <expr>* '}'

literal := 'true' | 'false' | 'null' | <string> | <integer> | <ident>

kw-expr
 := <if-expr>
  | <while-expr>
  | <func-decl>
  | 'return' <expr>?
  | 'continue'
  | 'break'

if-expr    := 'if' <expr> <block> ('elsif' <expr> <block>)* ('else' <block>)?
while-expr := 'while' <expr> <block>
func-decl  := 'func' <ident> '(' (EMPTY | <ident> (',' <ident>)*) ')' <block>

unary-op := [-+~!]
binary-op := [+-*/%&|^<>] | [<>=!]= | '**' | '<<' | '>>'
assignment-op := ([-+*/%&|^] | '**' | '<<' | '>>')?=
integer := [0-9]+
ident := [a-zA-Z_] [a-zA-Z0-9_]*
string := '"' ('\' ANY_CHAR | anything but '"')* '"'
